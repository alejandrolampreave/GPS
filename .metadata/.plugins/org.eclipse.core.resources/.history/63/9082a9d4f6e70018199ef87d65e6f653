/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : FAT1.c
**     Project     : DataLogger
**     Processor   : MK64FN1M0VLL12
**     Component   : FAT_FileSystem
**     Version     : Component 01.203, Driver 01.00, CPU db: 3.00.000
**     Repository  : My Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-10-24, 18:23, # CodeGen: 6
**     Abstract    :
**
**     Settings    :
**          Component name                                 : FAT1
**          FatFs Version                                  : R0.12 (Patch 3, 29-April-2016)
**          Tiny                                           : no
**          Volumes                                        : 1
**          Drives                                         : 1
**            Drive0                                       : SD1
**          FS_MINIMIZE                                    : 0
**          Maximum Sector Size                            : 512
**          Relative Path                                  : Enabled with f_getcwd()
**          Code Page                                      : U.S. (OEM)
**          File Sharing                                   : 0
**          Multipartion                                   : no
**          Fast Seek                                      : yes
**          Use Find                                       : Disable (0)
**          String Functions                               : enable
**          LFN                                            : Long File Name Support
**            Use LFN                                      : Disable
**            exFAT                                        : no
**            Max LFN Length                               : 255
**            LFN Unicode                                  : no
**          Write enabled                                  : Enabled
**            Use TimeDate                                 : Enabled
**              Realtime clock                             : TmDt1
**          Reentrant                                      : Disabled
**          Utility                                        : UTIL1
**          Shell                                          : Disabled
**     Contents    :
**         open             - FRESULT FAT1_open(FIL *fp, const XCHAR *path, BYTE mode);
**         close            - FRESULT FAT1_close(FIL *fp);
**         read             - FRESULT FAT1_read(FIL *fp, void *buff, UINT btr, UINT *br);
**         write            - FRESULT FAT1_write(FIL *fp, const *void buff, UINT btw, UINT *bw);
**         opendir          - FRESULT FAT1_opendir(DIR *dj, const XCHAR *path);
**         readdir          - FRESULT FAT1_readdir(DIR *dj, FILINFO *fno);
**         lseek            - FRESULT FAT1_lseek(FIL *fp, DWORD ofs);
**         unlink           - FRESULT FAT1_unlink(const XCHAR *path);
**         mount            - FRESULT FAT1_mount(FATFS *fs, const TCHAR* path, byte opt);
**         getfree          - FRESULT FAT1_getfree(const XCHAR *path, dword *nclst, FATFS **fatfs);
**         sync             - FRESULT FAT1_sync(FIL *fp);
**         rename           - FRESULT FAT1_rename(const XCHAR *path_old, const XCHAR *path_new);
**         isWriteProtected - bool FAT1_isWriteProtected(uint8_t *drvStr);
**         isDiskPresent    - bool FAT1_isDiskPresent(uint8_t *drvStr);
**         mkdir            - FRESULT FAT1_mkdir(const XCHAR *path);
**         chmod            - FRESULT FAT1_chmod(const TCHAR* FileName, uint8_t Attribute, uint8_t...
**         truncate         - FRESULT FAT1_truncate(FIL *FileObject);
**         stat             - FRESULT FAT1_stat(const TCHAR* FileName, FILINFO* FileInfo);
**         utime            - FRESULT FAT1_utime(const TCHAR* FileName, const FILINFO* TimeDate);
**         mkfs             - FRESULT FAT1_mkfs(byte drive, uint8_t PartitioningRule, UINT  AllocSize);
**         chdir            - FRESULT FAT1_chdir(const TCHAR* Path);
**         chdrive          - FRESULT FAT1_chdrive(uint8_t Drive);
**         getcwd           - FRESULT FAT1_getcwd(TCHAR* Buffer, UINT BufferLen);
**         errFResultMsg    - char* FAT1_errFResultMsg(int errNo);
**         errDResultMsg    - char* FAT1_errDResultMsg(int errNo);
**         f_gets           - FAT1_CHARP FAT1_f_gets(TCHAR* buff, int len, FIL *fil);
**         f_puts           - FAT1_INT FAT1_f_puts(const TCHAR* str, FIL *fil);
**         f_putc           - FAT1_INT FAT1_f_putc(TCHAR c, FIL *fil);
**         f_printf         - FAT1_INT FAT1_f_printf(FIL* fil, const TCHAR* str, ...);
**         f_eof            - byte FAT1_f_eof(FIL *fil);
**         f_error          - uint8_t FAT1_f_error(FIL *fil);
**         f_tell           - dword FAT1_f_tell(FIL *fil);
**         f_size           - dword FAT1_f_size(FIL *fil);
**         f_getlabel       - FRESULT FAT1_f_getlabel(const TCHAR* path, TCHAR* label, DWORD* vsn);
**         f_setlabel       - FRESULT FAT1_f_setlabel(const TCHAR* label);
**         f_expand         - FRESULT FAT1_f_expand(FIL* fp, FSIZE_t fsz, BYTE opt);
**         f_findfirst      - FRESULT FAT1_f_findfirst(DIR* dp, FILINFO* fno, const TCHAR* path, const...
**         f_findnext       - FRESULT FAT1_f_findnext(DIR* dp, FILINFO* fno);
**         f_opendir        - FRESULT FAT1_f_opendir(DIR* dp, const TCHAR* path);
**         f_readdir        - FRESULT FAT1_f_readdir(DIR *dj, FILINFO *fno);
**         f_closedir       - FRESULT FAT1_f_closedir(DIR* dp);
**         get_fattime      - uint32_t FAT1_get_fattime(void);
**         Deinit           - uint8_t FAT1_Deinit(void);
**         Init             - uint8_t FAT1_Init(void);
**
**     Copyright (c) 2014-2017,  Erich Styger
**     Web: http://mcuoneclipse.com/
**     SourceForge: https://sourceforge.net/projects/mcuoneclipse
**     Git: https://github.com/ErichStyger/McuOnEclipse_PEx
**     All rights reserved.
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     - Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     - Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file FAT1.c
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup FAT1_module FAT1 module documentation
**  @{
*/         

/* MODULE FAT1. */

#include "ff.h"
#include "FAT1.h"

/*-----------------------------------------------------------------------*/
static uint8_t StrToDriveNumber(uint8_t *drvStr) {
  uint8_t drv = 0;
  const unsigned char *p;

  if (drvStr==NULL || *drvStr=='\0') { /* default, "" */
    drv = 0;
  } else {
    p = drvStr;
    if (UTIL1_ScanDecimal8uNumber(&p, &drv)!=ERR_OK) { /* "0", "1", ... */
      drv = 0; /* error, use default number */
    }
  }
  return drv;
}
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
DSTATUS disk_initialize (
        uint8_t drv                     /* Physical drive number (0..) */
)
{
  switch(drv) {
    case 0:
      return SD1_disk_initialize(drv);
    default:
      break;
  } /* switch */
  return (DSTATUS)RES_PARERR;
}
/*-----------------------------------------------------------------------*/
/* Return Disk Status                                                    */
DSTATUS disk_status (
        uint8_t drv                     /* Physical drive number (0..) */
)
{
  switch(drv) {
    case 0:
      return SD1_disk_status(drv);
    default:
      break;
  } /* switch */
  return (DSTATUS)RES_PARERR;
}
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
DRESULT disk_read (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t *buff,                  /* Data buffer to store read data */
        uint32_t sector,                /* Sector address (LBA) */
        unsigned int count              /* Number of sectors to read */
)
{
  switch(drv) {
    case 0:
      return SD1_disk_read(drv, buff, sector, count);
    default:
      break;
  } /* switch */
  return RES_PARERR;
}
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
#if _READONLY == 0
DRESULT disk_write (
        uint8_t drv,                    /* Physical drive number (0..) */
        const uint8_t *buff,            /* Data to be written */
        uint32_t sector,                /* Sector address (LBA) */
        unsigned int count              /* Number of sectors to write */
)
{
  switch(drv) {
    case 0:
      return SD1_disk_write(drv, buff, sector, count);
    default:
      break;
  } /* switch */
  return RES_PARERR;
}
#endif /* _READONLY == 0 */
/*-----------------------------------------------------------------------*/
DRESULT disk_ioctl (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t ctrl,                   /* Control code */
        void *buff                      /* Buffer to send/receive control data */
)
{
  switch(drv) {
    case 0:
      return SD1_disk_ioctl(drv, ctrl, buff);
    default:
      break;
  } /* switch */
  return RES_PARERR;
}
/*-----------------------------------------------------------------------*/

/* Unicode support functions */
#if _USE_LFN  /* Unicode - OEM code conversion */
#if _USE_LFN == 3   /* Memory functions */
void *ff_memalloc(UINT size) { /* Allocate memory block */
  #error "No RTOS defined?"
}

void ff_memfree (void* ptr) {  /* Free memory block */
  #error "No RTOS defined?"
}
#endif
#endif

#if _FS_REENTRANT
/*!
* \brief Create a Synchronization Object
* This function is called in f_mount function to create a new
* synchronization object, such as semaphore and mutex. When a FALSE is
* returned, the f_mount function fails with FR_INT_ERR.
* \param[in] vol Corresponding logical drive being processed
* \param[out] sobj Pointer to return the created sync object
* \return TRUE: Function succeeded, FALSE: Could not create due to any error
*/
#if configSUPPORT_STATIC_ALLOCATION
  static StaticSemaphore_t xMutexBuffer[_VOLUMES];
#endif

int ff_cre_syncobj(uint8_t vol, _SYNC_t *sobj) {
  (void)vol; /* argument not used */
  /* _FS_REENTRANT enabled, no RTOS enabled, and you don't want to provide your own sync method.
     That means that you cannot have parallel access to the file system object.
     If you have parallel access to the memory bus, you need to handle this from the memory component.
   */
  (void)sobj;
  return TRUE;
}

/*!
* \brief Delete a Synchronization Object
* This function is called in f_mount function to delete a synchronization
* object that created with ff_cre_syncobj function. When a FALSE is
* returned, the f_mount function fails with FR_INT_ERR.
* \param[out] sobj Sync object tied to the logical drive to be deleted
* \return TRUE: Function succeeded, FALSE: Could not create due to any error
*/
int ff_del_syncobj(_SYNC_t sobj) {
  /* _FS_REENTRANT enabled, no RTOS enabled, and you don't want to provide your own sync method.
     That means that you cannot have parallel access to the file system object.
     If you have parallel access to the memory bus, you need to handle this from the memory component.
   */
  (void)sobj; /* unused parameter */
  return TRUE;
}

/*!
* \brief Request Grant to Access the Volume
* This function is called on entering file functions to lock the volume.
* When a FALSE is returned, the file function fails with FR_TIMEOUT.
* \param[in] sobj Sync object to wait
* \return TRUE: Function succeeded, FALSE: Could not create due to any error
*/
int ff_req_grant (_SYNC_t sobj) {
  /* _FS_REENTRANT enabled, no RTOS enabled, and you don't want to provide your own sync method.
     That means that you cannot have parallel access to the file system object.
     If you have parallel access to the memory bus, you need to handle this from the memory component.
   */
  (void)sobj; /* unused parameter */
  return TRUE; /* success */
}

/*!
* \brief Release Grant to Access the Volume
* This function is called on leaving file functions to unlock the volume.
* \param[in] sobj Sync object to be signaled
*/
void ff_rel_grant (_SYNC_t sobj) {
  /* _FS_REENTRANT enabled, no RTOS enabled, and you don't want to provide your own sync method.
     That means that you cannot have parallel access to the file system object.
     If you have parallel access to the memory bus, you need to handle this from the memory component.
   */
  (void)sobj; /* unused parameter */
}
#endif /* _FS_REENTRANT */

/*
** ===================================================================
**     Method      :  FAT1_open (component FAT_FileSystem)
**     Description :
**         Open/Create a file
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the blank file object structure
**         path            - Pointer to a null-terminated string that
**                           specifies the file name to create or open.
**         mode            - Specifies the type of access and open
**                           method for the file. It is specified by a
**                           combination of following flags.
**                           FA_READ: Specifies read access to the
**                           object. Data can be read from the file.
**                           Combine with FA_WRITE for read-write access.
**                           FA_WRITE: Specifies write access to the
**                           object. Data can be written to the file.
**                           Combine with FA_READ for read-write access.
**                           FA_OPEN_EXISTING: Opens the file. The
**                           function fails if the file is not existing.
**                           (Default)
**                           FA_OPEN_ALWAYS: Opens the file if it is
**                           existing. If not, a new file is created. To
**                           append data to the file, use f_lseek
**                           function after file open in this method.
**                           FA_CREATE_NEW: Creates a new file. The
**                           function fails if the file is already
**                           existing.
**                           FA_CREATE_ALWAYS: Creates a new file. If
**                           the file is existing, it is truncated and
**                           overwritten.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_open(FIL *fp, const XCHAR *path, BYTE mode)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_close (component FAT_FileSystem)
**     Description :
**         Close a file
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the open file object structure to
**                           be closed.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_close(FIL *fp)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_read (component FAT_FileSystem)
**     Description :
**         Read file
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the file object
**         buff            - Pointer to the data buffer
**         btr             - Number of bytes to read
**         br              - Pointer to the number of bytes read
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_read(FIL *fp, void *buff, UINT btr, UINT *br)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_write (component FAT_FileSystem)
**     Description :
**         Write to a file
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the file object structure 
**         buff            - Pointer to the data to be written
**         btw             - Number of bytes to write
**         bw              - Pointer to the variable to return number of
**                           bytes written
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_write(FIL *fp, const *void buff, UINT btw, UINT *bw)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_opendir (component FAT_FileSystem)
**     Description :
**         Open a directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         dj              - Pointer to the blank directory object to be
**                           created.
**         path            - Pointer to the null-terminated string
**                           that specifies the directory name to be
**                           opened.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_opendir(DIR *dj, const XCHAR *path)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_readdir (component FAT_FileSystem)
**     Description :
**         Read a directory item
**     Parameters  :
**         NAME            - DESCRIPTION
**         dir             - Pointer to the open directory object
**         fno             - Pointer to the file information structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_readdir(DIR *dj, FILINFO *fno)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_lseek (component FAT_FileSystem)
**     Description :
**         The f_lseek function moves the file read/write pointer of an
**         open file object. It can also be used to increase the file
**         size (cluster pre-allocation).
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the file object
**         ofs             - File pointer from top of file
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_lseek(FIL *fp, DWORD ofs)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_unlink (component FAT_FileSystem)
**     Description :
**         Remove a file or directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         path            - Pointer to the object name
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_unlink(const XCHAR *path)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_mount (component FAT_FileSystem)
**     Description :
**         Mount/unmount a logical drive
**     Parameters  :
**         NAME            - DESCRIPTION
**         fs              - pointer to the new file system object (NULL
**                           for unmount)
**       * path            - Logical drive number to be
**                           mounted/unmounted
**         opt             - options: 0:Do not mount (delayed mount), 1:
**                           Mount immediately
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_mount(FATFS *fs, const TCHAR* path, uint8_t opt)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_getfree (component FAT_FileSystem)
**     Description :
**         Get Number of Free Clusters
**     Parameters  :
**         NAME            - DESCRIPTION
**         path            - Pointer to the logical drive number
**                           (root dir)
**       * nclst           - Pointer to the variable to return
**                           number of free clusters
**         fatfs           - Pointer to pointer to file system
**                           object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_getfree(const XCHAR *path, dword *nclst, FATFS **fatfs)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_sync (component FAT_FileSystem)
**     Description :
**         Flush cached data of a writing file
**     Parameters  :
**         NAME            - DESCRIPTION
**         fp              - Pointer to the file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_sync(FIL *fp)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_rename (component FAT_FileSystem)
**     Description :
**         Delete a file or directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         path_old        - Pointer to old object name
**         path_new        - Pointer to new object name
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_rename(const XCHAR *path_old, const XCHAR *path_new)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_mkdir (component FAT_FileSystem)
**     Description :
**         Creates a directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         path            - Name of directory to be created
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_mkdir(const XCHAR *path)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_chmod (component FAT_FileSystem)
**     Description :
**         Changes the attribute of a file or directory
**         Following attribute flags to be set in one or more
**         combination of the following flags. The specified flags are
**         set and others are cleared.
**         AM_RDO	Read only
**         AM_ARC	Archive
**         AM_SYS	System
**         AM_HID	Hidden
**     Parameters  :
**         NAME            - DESCRIPTION
**         FileName        - Pointer to the file or directory
**         Attribute       - Attribute flags. Attribute
**                           flags to be set in one or more combination
**                           of the following flags. The specified flags
**                           are set and others are cleard.
**         AttributeMask   - Attribute mask.
**                           Attribute mask that specifies which
**                           attribute is changed. The specified
**                           aattributes are set or cleard.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_chmod(const TCHAR* FileName, uint8_t Attribute, uint8_t AttributeMask)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_truncate (component FAT_FileSystem)
**     Description :
**         Truncates the file size.
**         The truncate() function truncates the file size to the
**         current file read/write point. This function has no effect
**         if the file read/write pointer is already pointing end of
**         the file.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * FileObject      - Pointer to the file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_truncate(FIL *FileObject)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_stat (component FAT_FileSystem)
**     Description :
**         The f_stat gets the information of a file or directory. For
**         details of the infomation, refer to the FILINFO structure
**         and f_readdir function. This function is not supported in
**         minimization level of >= 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         FileName        - Pointer to the file or directory
**                           path
**       * FileInfo        - Pointer to the FILINFO structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_stat(const TCHAR* FileName, FILINFO* FileInfo)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_utime (component FAT_FileSystem)
**     Description :
**         The f_utime function changes the timestamp of a file or
**         directory
**     Parameters  :
**         NAME            - DESCRIPTION
**       * FileName        - Pointer to the file or directory
**                           path
**       * TimeDate        - Pointer to time and data to be
**                           set
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_utime(const TCHAR* FileName, const FILINFO* TimeDate)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_mkfs (component FAT_FileSystem)
**     Description :
**         The f_mkfs fucntion creates a file system on the drive.
**     Parameters  :
**         NAME            - DESCRIPTION
**         drive           - Logical drive number
**         PartitioningRule - When 0 is given,
**                           a partition table is created into the
**                           master boot record and a primary DOS
**                           partition is created and then an FAT volume
**                           is created on the partition. This is called
**                           FDISK format and used for harddisk and
**                           memory cards. When 1 is given, the FAT
**                           volume starts from the first sector on the
**                           drive without partition table. This is
**                           called SFD format and used for floppy disk
**                           and most optical disk
**         AllocSize       - Size of the allocation unit.
**                           Force the allocation unit (cluster) size in
**                           unit of byte. The value must be power of 2
**                           and between the sector size and 128 times
**                           sector size. When invalid value is
**                           specified, the cluster size is determined
**                           depends on the volume size.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_mkfs(uint8_t drive, uint8_t PartitioningRule, UINT  AllocSize)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_chdir (component FAT_FileSystem)
**     Description :
**         The f_chdir function changes the current directory of the
**         logical drive. The current directory of a drive is
**         initialized to the root directory when the drive is
**         auto-mounted. Note that the current directory is retained in
**         the each file system object so that it also affects other
**         tasks that using the drive.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Path            - Pointer to the path name
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_chdir(const TCHAR* Path)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_chdrive (component FAT_FileSystem)
**     Description :
**         The f_chdrive function changes the current drive. The
**         initial value of the current drive number is 0. Note that
**         the current drive is retained in a static variable so that
**         it also affects other tasks that using the file functions.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Drive           - Logical drive number
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_chdrive(uint8_t Drive)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_getcwd (component FAT_FileSystem)
**     Description :
**         The f_getcwd function retrieves the current directory of the
**         current drive in full path string including drive number.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Buffer          - Pointer to the buffer to receive the
**                           current directory string.
**         BufferLen       - Size of the buffer in unit of
**                           TCHAR.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_getcwd(TCHAR* Buffer, UINT BufferLen)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_errFResultMsg (component FAT_FileSystem)
**     Description :
**         Returns for a given FatFs FRESULT error code a string
**     Parameters  :
**         NAME            - DESCRIPTION
**         errNo           - FatFs error code
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
char* FAT1_errFResultMsg(int errNo)
{
  switch(errNo) {
    case FR_OK:                  return (char*)"Succeeded";
    case FR_DISK_ERR:            return (char*)"A hard error occurred in the low level disk I/O layer";
    case FR_INT_ERR:             return (char*)"Assertion failed";
    case FR_NOT_READY:           return (char*)"The physical drive cannot work";
    case FR_NO_FILE:             return (char*)"Could not find the file";
    case FR_NO_PATH:             return (char*)"Could not find the path";
    case FR_INVALID_NAME:        return (char*)"The path name format is invalid";
    case FR_DENIED:              return (char*)"Access denied due to prohibited access or directory full";
    case FR_EXIST:               return (char*)"Access denied due to prohibited access";
    case FR_INVALID_OBJECT:      return (char*)"The file/directory object is invalid";
    case FR_WRITE_PROTECTED:     return (char*)"The physical drive is write protected";
    case FR_INVALID_DRIVE:       return (char*)"The logical drive number is invalid";
    case FR_NOT_ENABLED:         return (char*)"The volume has no work area";
    case FR_NO_FILESYSTEM:       return (char*)"There is no valid FAT volume on the physical drive";
    case FR_MKFS_ABORTED:        return (char*)"The f_mkfs() aborted due to any parameter error";
    case FR_TIMEOUT:             return (char*)"Could not get a grant to access the volume within defined period";
    case FR_LOCKED:              return (char*)"The operation is rejected according to the file sharing policy";
    case FR_NOT_ENOUGH_CORE:     return (char*)"LFN working buffer could not be allocated";
    case FR_TOO_MANY_OPEN_FILES: return (char*)"Number of open files > _FS_SHARE";
    /*default:                     return (char*)"unknown";*/
  } /* switch */
  return (char*)"*error*";
}

/*
** ===================================================================
**     Method      :  FAT1_errDResultMsg (component FAT_FileSystem)
**     Description :
**         Returns for a given FatFs DRESULT error code a string
**     Parameters  :
**         NAME            - DESCRIPTION
**         errNo           - FatFs error code
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
char* FAT1_errDResultMsg(int errNo)
{
  switch(errNo) {
    case RES_OK:     return (char*)"Successful";
    case RES_ERROR:  return (char*)"R/W Error";
    case RES_WRPRT:  return (char*)"Write Protected";
    case RES_NOTRDY: return (char*)"Not Ready";
    case RES_PARERR: return (char*)"Invalid Parameter";
    /*default:         return (char*)"unknown";*/
  } /* switch */
  return (char*)"*error*";
}

/*
** ===================================================================
**     Method      :  FAT1_isWriteProtected (component FAT_FileSystem)
**     Description :
**         Determines if the file system is write protected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * drvStr          - Pointer to drive string, e.g. "" or
**                           "0"
**     Returns     :
**         ---             - TRUE if file system is write protected
** ===================================================================
*/
bool FAT1_isWriteProtected(uint8_t *drvStr)
{
  uint8_t drv;

  drv = StrToDriveNumber(drvStr);
  switch(drv) {
    case 0:
      return SD1_isWriteProtected();
    default:
      break;
  } /* switch */
  return TRUE;
}

/*
** ===================================================================
**     Method      :  FAT1_isDiskPresent (component FAT_FileSystem)
**     Description :
**         Determines if the disk is present or not (e.g. disk inserted).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * drvStr          - drive string, "" or "0" or "1"
**     Returns     :
**         ---             - TRUE if file system is write protected
** ===================================================================
*/
bool FAT1_isDiskPresent(uint8_t *drvStr)
{
  uint8_t drv;

  drv = StrToDriveNumber(drvStr);
  switch(drv) {
    case 0:
      return SD1_CardPresent();
    default:
      break;
  } /* switch */
  return FALSE;
}

/*
** ===================================================================
**     Method      :  FAT1_f_gets (component FAT_FileSystem)
**     Description :
**         Get a string from the file
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buff            - Pointer to the string buffer to read 
**         len             - Size of string buffer (characters)
**         fil             - Pointer to the file object
**     Returns     :
**         ---             - zero (NULL) if failed, otherwise a string
**                           to the buffer is returned.
** ===================================================================
*/
/*
FAT1_CHARP FAT1_f_gets(TCHAR* buff, int len, FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_puts (component FAT_FileSystem)
**     Description :
**         Put a string to the file
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buff            - A character to be output
**         fil             - Pointer to the file object
**     Returns     :
**         ---             - number of characters written.
** ===================================================================
*/
/*
FAT1_INT FAT1_f_puts(const TCHAR* str, FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_putc (component FAT_FileSystem)
**     Description :
**         Put a character to the file
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buff            - A character to be output
**         fil             - Pointer to the file object
**     Returns     :
**         ---             - 1 if ok, EOF otherwise
** ===================================================================
*/
/*
FAT1_INT FAT1_f_putc(TCHAR c, FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_printf (component FAT_FileSystem)
**     Description :
**         Put a formatted string to the file
**     Parameters  :
**         NAME            - DESCRIPTION
**         Variable_1      - Pointer to the file object
**         str             - Pointer to the format string
**         Variable_2      - Optional arguments...
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FAT1_INT FAT1_f_printf(FIL* fil, const TCHAR* str, ...)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_eof (component FAT_FileSystem)
**     Description :
**         Wrapper to to the f_eof() macro. Returns 1 if at the end of
**         the file, 0 otherwise.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * fp              - Pointer to file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
uint8_t FAT1_f_eof(FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_error (component FAT_FileSystem)
**     Description :
**         Wrapper to to the f_eof() macro. Returns 1 if at the end of
**         the file, 0 otherwise.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * fp              - Pointer to file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
uint8_t FAT1_f_error(FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_tell (component FAT_FileSystem)
**     Description :
**         Wrapper to to the f_tell() macro. Returns the file
**         read/write pointer (0 on file open).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * fp              - Pointer to file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
dword FAT1_f_tell(FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_size (component FAT_FileSystem)
**     Description :
**         Wrapper to to the f_size() macro. Returns the file size.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * fp              - Pointer to file object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
dword FAT1_f_size(FIL *fil)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_Init (component FAT_FileSystem)
**     Description :
**         Initializes the device driver.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t FAT1_Init(void)
{
  uint8_t res = ERR_OK;

  if (SD1_Init(NULL)!=ERR_OK) {
    res = ERR_FAILED;
  }
  return res;
}

/*
** ===================================================================
**     Method      :  FAT1_Deinit (component FAT_FileSystem)
**     Description :
**         Deinitializes the driver.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t FAT1_Deinit(void)
{
  uint8_t res = ERR_OK;

  if (SD1_Deinit(NULL)!=ERR_OK) {
    res = ERR_FAILED;
  }
  return res;
}


#if !_FS_READONLY
/*
** ===================================================================
**     Method      :  FAT1_get_fattime (component FAT_FileSystem)
**     Description :
**         Returns the current time
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint32_t FAT1_get_fattime(void)
{
  /* 31-25: Year(0-127 org.1980), 24-21: Month(1-12), 20-16: Day(1-31) */
  /* 15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */
  /* Pack date and time into a uint32_t variable */
  TIMEREC time;
  DATEREC date;
  uint8_t res;

  res = TmDt1_GetTime(&time);           /* get time information */
  if (res!=ERR_OK) {
    return 0; /* failed */
  }
  res = TmDt1_GetDate(&date);           /* get date information */
  if (res!=ERR_OK) {
    return 0; /* failed */
  }
  return ((uint32_t)(date.Year - 1980) << 25)
       | ((uint32_t)date.Month << 21)
       | ((uint32_t)date.Day << 16)
       | ((uint32_t)time.Hour << 11)
       | ((uint32_t)time.Min << 5)
       | ((uint32_t)time.Sec);
}

uint32_t get_fattime(void) {
  return FAT1_get_fattime();
}
#endif /*!_FS_READONLY*/


/*
** ===================================================================
**     Method      :  FAT1_f_getlabel (component FAT_FileSystem)
**     Description :
**         Get volume label
**     Parameters  :
**         NAME            - DESCRIPTION
**       * path            - Pointer to path name of the logical
**                           drive number
**       * label           - Pointer to a buffer to return the
**                           volume label
**         vsn             - 
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_getlabel(const TCHAR* path, TCHAR* label, DWORD* vsn)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_setlabel (component FAT_FileSystem)
**     Description :
**         Set Volume Label 
**     Parameters  :
**         NAME            - DESCRIPTION
**       * label           - Pointer to the volume label to set
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_setlabel(const TCHAR* label)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_expand (component FAT_FileSystem)
**     Description :
**         Allocate a Contiguous Blocks to the File
**     Parameters  :
**         NAME            - DESCRIPTION
**       * fp              - Pointer to the file object
**         fsz             - File size to be expanded to
**         opt             - Operation mode 0:Find and prepare or 1:
**                           Find and allocate
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_expand(FIL* fp, FSIZE_t fsz, BYTE opt)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_findfirst (component FAT_FileSystem)
**     Description :
**         Find FirstFile
**     Parameters  :
**         NAME            - DESCRIPTION
**         dp              - Pointer to the open directory object
**         fno             - Pointer to the file information structure
**         path            - Pointer to the directory to open
**         pattern         - Pointer to the matching pattern
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_findfirst(DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_findnext (component FAT_FileSystem)
**     Description :
**         Find Next File
**     Parameters  :
**         NAME            - DESCRIPTION
**         dp              - Pointer to the open directory object
**         fno             - Pointer to the file information structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_findnext(DIR* dp, FILINFO* fno)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_opendir (component FAT_FileSystem)
**     Description :
**         Open a directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         dp              - Pointer to the open directory object
**         path            - path of directory
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_opendir(DIR* dp, const TCHAR* path)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_closedir (component FAT_FileSystem)
**     Description :
**         Close a directory
**     Parameters  :
**         NAME            - DESCRIPTION
**         dp              - Pointer to the open directory object
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_closedir(DIR* dp)
{
  *** method is implemented as macro in the header file
}
*/

/*
** ===================================================================
**     Method      :  FAT1_f_readdir (component FAT_FileSystem)
**     Description :
**         Read a directory item
**     Parameters  :
**         NAME            - DESCRIPTION
**         dir             - Pointer to the open directory object
**         fno             - Pointer to the file information structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
/*
FRESULT FAT1_f_readdir(DIR *dj, FILINFO *fno)
{
  *** method is implemented as macro in the header file
}
*/

/* END FAT1. */

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
