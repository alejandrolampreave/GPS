=============================================================================
List of generated methods in project: DataLogger

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "FAT1"      (component FAT_FileSystem)
   - FAT1_open -Open/Create a file
   - FAT1_close -Close a file
   - FAT1_read -Read file
   - FAT1_write -Write to a file
   - FAT1_opendir -Open a directory
   - FAT1_readdir -Read a directory item
   - FAT1_lseek -The f_lseek function moves the file read/write pointer of an open file object. It can also be used to increase 
                the file size (cluster pre-allocation).
   - FAT1_unlink -Remove a file or directory
   - FAT1_mount -Mount/unmount a logical drive
   - FAT1_getfree -Get Number of Free Clusters
   - FAT1_sync -Flush cached data of a writing file
   - FAT1_rename -Delete a file or directory
   - FAT1_isWriteProtected -Determines if the file system is write protected.
   - FAT1_isDiskPresent -Determines if the disk is present or not (e.g. disk inserted).
   - FAT1_mkdir -Creates a directory
   - FAT1_chmod -Changes the attribute of a file or directory   Following attribute flags to be set in one or more combination 
                of the following flags. The specified flags are set and others are cleared.   AM_RDO	Read only   AM_ARC	Archive 
                AM_SYS	System   AM_HID	Hidden
   - FAT1_truncate -Truncates the file size.   The truncate() function truncates the file size to the current file read/write 
                point. This function has no effect if the file read/write pointer is already pointing end of the file.
   - FAT1_stat -The f_stat gets the information of a file or directory. For details of the infomation, refer to the FILINFO 
                structure and f_readdir function. This function is not supported in minimization level of >= 1.
   - FAT1_utime -The f_utime function changes the timestamp of a file or directory
   - FAT1_mkfs -The f_mkfs fucntion creates a file system on the drive.
   - FAT1_chdir -The f_chdir function changes the current directory of the logical drive. The current directory of a drive is 
                initialized to the root directory when the drive is auto-mounted. Note that the current directory is retained 
                in the each file system object so that it also affects other tasks that using the drive.
   - FAT1_chdrive -The f_chdrive function changes the current drive. The initial value of the current drive number is 0. Note 
                that the current drive is retained in a static variable so that it also affects other tasks that using the file 
                functions.
   - FAT1_getcwd -The f_getcwd function retrieves the current directory of the current drive in full path string including 
                drive number.
   - FAT1_errFResultMsg -Returns for a given FatFs FRESULT error code a string
   - FAT1_errDResultMsg -Returns for a given FatFs DRESULT error code a string
   - FAT1_f_gets -Get a string from the file
   - FAT1_f_puts -Put a string to the file
   - FAT1_f_putc -Put a character to the file
   - FAT1_f_printf -Put a formatted string to the file
   - FAT1_f_eof -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_error -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_tell -Wrapper to to the f_tell() macro. Returns the file read/write pointer (0 on file open).
   - FAT1_f_size -Wrapper to to the f_size() macro. Returns the file size.
   - FAT1_f_getlabel -Get volume label
   - FAT1_f_setlabel -Set Volume Label
   - FAT1_f_expand -Allocate a Contiguous Blocks to the File
   - FAT1_f_findfirst -Find FirstFile
   - FAT1_f_findnext -Find Next File
   - FAT1_f_opendir -Open a directory
   - FAT1_f_readdir -Read a directory item
   - FAT1_f_closedir -Close a directory
   - FAT1_get_fattime -Returns the current time
   - FAT1_Deinit -Deinitializes the driver.
   - FAT1_Init -Initializes the device driver.

Module "SD1"       (component SD_Card)
   - SD1_Activate -If multiple devices are used on the same SPI bus, then the device needs to be activated. That way, the 
                different SPI protocol is selected.
   - SD1_Deactivate -Removes/deactivates the card from the bus
   - SD1_isWriteProtected -Determines if the card is write protected. Note that this is an indicator only, as it is still 
                possible to write to the card even if the write protection is set on the card!
   - SD1_CardPresent -Returns true in case a card is present. If there is no card detection pin, then this routine will always 
                return true.
   - SD1_WaitReady -Wait until the card is ready
   - SD1_ReceiveDataBlock -Retrieve a data block from the device
   - SD1_SendDataBlock -Send a data block to the device
   - SD1_SendCmd -Sends a command to the device and returns the response
   - SD1_SetSlowMode -Switches to slow mode SPI communication speed.
   - SD1_SetFastMode -Switches to fast mode SPI communication speed.
   - SD1_InitCommChannel -Method to initialize the communication channel. This is needed if the bus to the SD card is shared 
                with other devices.
   - SD1_Deinit -Driver deinitialization routine.
   - SD1_Init -Initializes the driver

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "TmDt1"     (component GenericTimeDate)
   - TmDt1_AddTick -Increments the tick counter of the software RTC. Needs to be called periodically by the application to 
                increase the time tick count.
   - TmDt1_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - TmDt1_CalculateDayOfWeek -Returns the day of the week, Sunday starting as zero. Monday is 1, ...
   - TmDt1_SetTime -This method sets a new actual time of the software RTC.
   - TmDt1_GetTime -This method returns current time from the software RTC.
   - TmDt1_SetDate -This method sets a new actual date of the software RTC.
   - TmDt1_GetDate -This method returns current date from the software RTC.
   - TmDt1_SetTimeDate -This method sets a new actual time and date of the RTC.
   - TmDt1_GetTimeDate -This method returns current time and date from the RTC.
   - TmDt1_SetSWTimeDate -This method sets a new actual time and date of the software RTC.
   - TmDt1_GetSWTimeDate -This method returns current time and date from the software RTC.
   - TmDt1_SetInternalRTCTimeDate -This method sets a new actual time and date of the internal hardware RTC.
   - TmDt1_GetInternalRTCTimeDate -This method returns current time and date from the hardware RTC.
   - TmDt1_SyncWithInternalRTC -Synchronizes the software RTC with date and time from the internal hardware RTC
   - TmDt1_SyncSWtimeToInternalRTCsec -This method synchronizes the software RTC with the internal HW RTC. Because the internal 
                RTC only counts seconds, we sync on a second change.
   - TmDt1_SetExternalRTCTimeDate -This method sets a new actual time and date of the external hardware RTC.
   - TmDt1_GetExternalRTCTimeDate -This method returns current time and date from the external hardware RTC.
   - TmDt1_SyncWithExternalRTC -Synchronizes the software RTC with date and time from the hardware RTC. Note that if that RTC 
                interface requires interrupts, this function should be called only when interrupts are enabled.
   - TmDt1_UnixSecondsToTimeDateCustom -Transforms a given time/date into the Unix time stamp, with the number of seconds from 
                a starting date
   - TmDt1_UnixSecondsToTimeDate -Transforms a given time/date into the Unix time stamp, with the number of seconds after 
                1-Jan-1970
   - TmDt1_TimeDateToUnixSecondsCustom -Returns for a given time/date the corresponding UNIX time stamp with a custom base date.
   - TmDt1_TimeDateToUnixSeconds -Returns for a given time/date the corresponding UNIX time stamp, starting at 1-Jan-1970.
   - TmDt1_AddDateString -Adds a formatted date string to a buffer
   - TmDt1_AddTimeString -Adds a formatted time string to a buffer
   - TmDt1_DeInit -Deinitializes the driver.
   - TmDt1_Init -Initialization method

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "MCUC1"     (component McuLibConfig)

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - SM1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SM1_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SM1_SelectConfiguration -This method selects attributes of communication from the <Attribute set list> and select a chip 
                select from the <Chip select list>. Once any configuration is selected, a transmission can be started multiple 
                times. This method is available if number of chip selects or number of attribute set is greater than 1. If the 
                device doesn't support chip select functionality the ChipSelect parameter is ignored.

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "Cpu"       (component MK64FN1M0LL12)

===================================================================================
