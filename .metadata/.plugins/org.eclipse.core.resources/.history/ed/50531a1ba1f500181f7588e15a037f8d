=============================================================================
List of generated methods in project: DataLogger

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "FAT1"      (component FAT_FileSystem)
   - FAT1_open -Open/Create a file
   - FAT1_close -Close a file
   - FAT1_read -Read file
   - FAT1_write -Write to a file
   - FAT1_opendir -Open a directory
   - FAT1_readdir -Read a directory item
   - FAT1_lseek -The f_lseek function moves the file read/write pointer of an open file object. It can also be used to increase 
                the file size (cluster pre-allocation).
   - FAT1_unlink -Remove a file or directory
   - FAT1_mount -Mount/unmount a logical drive
   - FAT1_getfree -Get Number of Free Clusters
   - FAT1_sync -Flush cached data of a writing file
   - FAT1_rename -Delete a file or directory
   - FAT1_isWriteProtected -Determines if the file system is write protected.
   - FAT1_isDiskPresent -Determines if the disk is present or not (e.g. disk inserted).
   - FAT1_mkdir -Creates a directory
   - FAT1_chmod -Changes the attribute of a file or directory   Following attribute flags to be set in one or more combination 
                of the following flags. The specified flags are set and others are cleared.   AM_RDO	Read only   AM_ARC	Archive 
                AM_SYS	System   AM_HID	Hidden
   - FAT1_truncate -Truncates the file size.   The truncate() function truncates the file size to the current file read/write 
                point. This function has no effect if the file read/write pointer is already pointing end of the file.
   - FAT1_stat -The f_stat gets the information of a file or directory. For details of the infomation, refer to the FILINFO 
                structure and f_readdir function. This function is not supported in minimization level of >= 1.
   - FAT1_utime -The f_utime function changes the timestamp of a file or directory
   - FAT1_mkfs -The f_mkfs fucntion creates a file system on the drive.
   - FAT1_chdir -The f_chdir function changes the current directory of the logical drive. The current directory of a drive is 
                initialized to the root directory when the drive is auto-mounted. Note that the current directory is retained 
                in the each file system object so that it also affects other tasks that using the drive.
   - FAT1_chdrive -The f_chdrive function changes the current drive. The initial value of the current drive number is 0. Note 
                that the current drive is retained in a static variable so that it also affects other tasks that using the file 
                functions.
   - FAT1_getcwd -The f_getcwd function retrieves the current directory of the current drive in full path string including 
                drive number.
   - FAT1_errFResultMsg -Returns for a given FatFs FRESULT error code a string
   - FAT1_errDResultMsg -Returns for a given FatFs DRESULT error code a string
   - FAT1_f_gets -Get a string from the file
   - FAT1_f_puts -Put a string to the file
   - FAT1_f_putc -Put a character to the file
   - FAT1_f_printf -Put a formatted string to the file
   - FAT1_f_eof -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_error -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_tell -Wrapper to to the f_tell() macro. Returns the file read/write pointer (0 on file open).
   - FAT1_f_size -Wrapper to to the f_size() macro. Returns the file size.
   - FAT1_f_getlabel -Get volume label
   - FAT1_f_setlabel -Set Volume Label
   - FAT1_f_expand -Allocate a Contiguous Blocks to the File
   - FAT1_f_findfirst -Find FirstFile
   - FAT1_f_findnext -Find Next File
   - FAT1_f_opendir -Open a directory
   - FAT1_f_readdir -Read a directory item
   - FAT1_f_closedir -Close a directory
   - FAT1_get_fattime -Returns the current time
   - FAT1_Deinit -Deinitializes the driver.
   - FAT1_Init -Initializes the device driver.

Module "SD1"       (component SD_Card)
   - SD1_Activate -If multiple devices are used on the same SPI bus, then the device needs to be activated. That way, the 
                different SPI protocol is selected.
   - SD1_Deactivate -Removes/deactivates the card from the bus
   - SD1_isWriteProtected -Determines if the card is write protected. Note that this is an indicator only, as it is still 
                possible to write to the card even if the write protection is set on the card!
   - SD1_CardPresent -Returns true in case a card is present. If there is no card detection pin, then this routine will always 
                return true.
   - SD1_WaitReady -Wait until the card is ready
   - SD1_ReceiveDataBlock -Retrieve a data block from the device
   - SD1_SendDataBlock -Send a data block to the device
   - SD1_SendCmd -Sends a command to the device and returns the response
   - SD1_SetSlowMode -Switches to slow mode SPI communication speed.
   - SD1_SetFastMode -Switches to fast mode SPI communication speed.
   - SD1_InitCommChannel -Method to initialize the communication channel. This is needed if the bus to the SD card is shared 
                with other devices.
   - SD1_Deinit -Driver deinitialization routine.
   - SD1_Init -Initializes the driver

Module "TmDt1"     (component GenericTimeDate)
   - TmDt1_AddTick -Increments the tick counter of the software RTC. Needs to be called periodically by the application to 
                increase the time tick count.
   - TmDt1_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - TmDt1_CalculateDayOfWeek -Returns the day of the week, Sunday starting as zero. Monday is 1, ...
   - TmDt1_SetTime -This method sets a new actual time of the software RTC.
   - TmDt1_GetTime -This method returns current time from the software RTC.
   - TmDt1_SetDate -This method sets a new actual date of the software RTC.
   - TmDt1_GetDate -This method returns current date from the software RTC.
   - TmDt1_SetTimeDate -This method sets a new actual time and date of the RTC.
   - TmDt1_GetTimeDate -This method returns current time and date from the RTC.
   - TmDt1_SetSWTimeDate -This method sets a new actual time and date of the software RTC.
   - TmDt1_GetSWTimeDate -This method returns current time and date from the software RTC.
   - TmDt1_SetInternalRTCTimeDate -This method sets a new actual time and date of the internal hardware RTC.
   - TmDt1_GetInternalRTCTimeDate -This method returns current time and date from the hardware RTC.
   - TmDt1_SyncWithInternalRTC -Synchronizes the software RTC with date and time from the internal hardware RTC
   - TmDt1_SyncSWtimeToInternalRTCsec -This method synchronizes the software RTC with the internal HW RTC. Because the internal 
                RTC only counts seconds, we sync on a second change.
   - TmDt1_SetExternalRTCTimeDate -This method sets a new actual time and date of the external hardware RTC.
   - TmDt1_GetExternalRTCTimeDate -This method returns current time and date from the external hardware RTC.
   - TmDt1_SyncWithExternalRTC -Synchronizes the software RTC with date and time from the hardware RTC. Note that if that RTC 
                interface requires interrupts, this function should be called only when interrupts are enabled.
   - TmDt1_UnixSecondsToTimeDateCustom -Transforms a given time/date into the Unix time stamp, with the number of seconds from 
                a starting date
   - TmDt1_UnixSecondsToTimeDate -Transforms a given time/date into the Unix time stamp, with the number of seconds after 
                1-Jan-1970
   - TmDt1_TimeDateToUnixSecondsCustom -Returns for a given time/date the corresponding UNIX time stamp with a custom base date.
   - TmDt1_TimeDateToUnixSeconds -Returns for a given time/date the corresponding UNIX time stamp, starting at 1-Jan-1970.
   - TmDt1_AddDateString -Adds a formatted date string to a buffer
   - TmDt1_AddTimeString -Adds a formatted time string to a buffer
   - TmDt1_DeInit -Deinitializes the driver.
   - TmDt1_Init -Initialization method

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "MCUC1"     (component McuLibConfig)

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - SM1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SM1_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.
   - SM1_SelectConfiguration -This method selects attributes of communication from the <Attribute set list> and select a chip 
                select from the <Chip select list>. Once any configuration is selected, a transmission can be started multiple 
                times. This method is available if number of chip selects or number of attribute set is greater than 1. If the 
                device doesn't support chip select functionality the ChipSelect parameter is ignored.

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByte -Read a byte from the device. This writes (S+i2cAddr+0), (Sr+i2cAddr+1),(data+P)
   - GI2C1_WriteByte -Write a byte to the device: (S+i2cAddr+0).(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ReadWordAddress8 -Read a word from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteWordAddress8 -Write a word to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_Init -Initializes the driver.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "FX1"       (component FXOS8700CQ)
   - FX1_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - FX1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - FX1_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - FX1_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - FX1_ReadReg8 -Reads an 8bit device register
   - FX1_WriteReg8 -Write an 8bit device register
   - FX1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - FX1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X sensor 
                has 1 g.
   - FX1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y sensor 
                has 1 g.
   - FX1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z sensor 
                has 1 g.
   - FX1_GetXmg -Returns the X value in mg
   - FX1_GetYmg -Returns the Y value in mg
   - FX1_GetZmg -Returns the Z value in mg
   - FX1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - FX1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - FX1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - FX1_GetXOffset -Returns the offset applied to the X value.
   - FX1_GetYOffset -Returns the offset applied to the Y value.
   - FX1_GetZOffset -Returns the offset applied to the Z value.
   - FX1_GetX1gValue -Returns the value for 1g for channel  X.
   - FX1_GetY1gValue -Returns the value for 1g for channel  Y.
   - FX1_GetZ1gValue -Returns the value for 1g for channel  Z.
   - FX1_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - FX1_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - FX1_GetTemperature -Returns the temperature of the die as signed 8bit values in degree Celsius
   - FX1_GetMagX -Returns the X magnetometer value.
   - FX1_GetMagY -Returns the Y magnetometer value.
   - FX1_GetMagZ -Returns the Z magnetometer value.
   - FX1_MagneticSensorReset -Initiates a magnetic sensor reset cycle that will restore correct operation after exposure to an 
                excessive magnetic field which exceeds the Full Scale Range but is less than the Maximum Applied Magnetic Field.
   - FX1_Init -Initializes the device driver
   - FX1_Deinit -Counterpart to Init() method.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "PPS"       (component ExtInt)
   - PPS_GetVal -Returns the actual value of the input pin of the component.

Module "GPS"       (component AsynchroSerial)
   - GPS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - GPS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - GPS_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - GPS_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - GPS_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - GPS_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - GPS_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - GPS_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "LEDR"      (component LED)
   - LEDR_On -This turns the LED on.
   - LEDR_Off -This turns the LED off.
   - LEDR_Neg -This negates/toggles the LED
   - LEDR_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LEDR_Put -Turns the LED on or off.
   - LEDR_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - LEDR_Deinit -Deinitializes the driver
   - LEDR_Init -Performs the LED driver initialization.

Module "LEDG"      (component LED)
   - LEDG_On -This turns the LED on.
   - LEDG_Off -This turns the LED off.
   - LEDG_Neg -This negates/toggles the LED
   - LEDG_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LEDG_Put -Turns the LED on or off.
   - LEDG_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - LEDG_Deinit -Deinitializes the driver
   - LEDG_Init -Performs the LED driver initialization.

Module "FRTOS1"    (component FreeRTOS)
   - FRTOS1_xTaskCreate -Create a new task and add it to the list of tasks that are ready to run.
   - FRTOS1_xTaskCreateStatic -Create a new task and add it to the list of tasks that are ready to run.
   - FRTOS1_vTaskStartScheduler -Starts the real time kernel tick processing. After calling the kernel has control over which 
                tasks are executed and when.   The idle task is created automatically when vTaskStartScheduler() is called.   
                If vTaskStartScheduler() is successful the function will not return until an executing task calls 
                vTaskEndScheduler(). The function might fail and return immediately if there is insufficient RAM available for 
                the idle task to be created.
   - FRTOS1_vTaskSuspend -Suspend any task. When suspended a task will never get any microcontroller processing time, no matter 
                what its priority. Calls to vTaskSuspend are not accumulative - i.e. calling vTaskSuspend() twice on the same 
                task still only requires one call to vTaskResume() to ready the suspended task.
   - FRTOS1_vTaskSuspendAll -Suspends all real time kernel activity while keeping interrupts (including the kernel tick) 
                enabled.   After calling vTaskSuspendAll () the calling task will continue to execute without risk of being 
                swapped out until a call to xTaskResumeAll () has been made.   API functions that have the potential to cause a 
                context switch (for example, vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler is 
                suspended.
   - FRTOS1_vTaskResume -Resumes a suspended task. A task that has been suspended by one of more calls to vTaskSuspend() will 
                be made available for running again by a single call to vTaskResume().
   - FRTOS1_xTaskResumeAll -Resumes real time kernel activity following a call to vTaskSuspendAll (). After a call to 
                xTaskSuspendAll () the kernel will take control of which task is executing at any time.
   - FRTOS1_xTaskResumeFromISR -An implementation of vTaskResume() that can be called from within an ISR. A task that has been 
                suspended by one of more calls to vTaskSuspend() will be made available for running again by a single call to 
                xTaskResumeFromISR().
   - FRTOS1_taskYIELD -Macro for forcing a context switch.
   - FRTOS1_taskENTER_CRITICAL -Macro to mark the start of a critical code region. Preemptive context switches cannot occur 
                when in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so 
                must be used with care!
   - FRTOS1_taskEXIT_CRITICAL -Macro to mark the end of a critical code region. Preemptive context switches cannot occur when 
                in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be 
                used with care!
   - FRTOS1_taskDISABLE_INTERRUPTS -Macro to disable all maskable interrupts.
   - FRTOS1_taskENABLE_INTERRUPTS -Macro to enable microcontroller interrupts.
   - FRTOS1_vTaskDelay -Delay a task for a given number of ticks. The actual time that the task remains blocked depends on the 
                tick rate. The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      vTaskDelay() specifies a time at which the task wishes to unblock relative 
                to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the 
                task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method 
                of controlling the frequency of a cyclical task as the path taken through the code, as well as other task and 
                interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which 
                the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed 
                frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the 
                calling task should unblock.
   - FRTOS1_vTaskDelayUntil -Delay a task until a specified time. This function can be used by cyclical tasks to ensure a 
                constant execution frequency.      This function differs from vTaskDelay() in one important aspect: 
                vTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is 
                called, whereas vTaskDelayUntil() specifies an absolute time at which the task wishes to unblock.      
                vTaskDelay() will cause a task to block for the specified number of ticks from the time vTaskDelay() is called. 
                It is therefore difficult to use vTaskDelay() by itself to generate a fixed execution frequency as the time 
                between a task unblocking following a call to vTaskDelay() and that task next calling vTaskDelay() may not be 
                fixed [the task may take a different path though the code between calls, or may get interrupted or preempted a 
                different number of times each time it executes].      Whereas vTaskDelay() specifies a wake time relative to 
                the time at which the function is called, vTaskDelayUntil() specifies the absolute (exact) time at which it 
                wishes to unblock.      It should be noted that vTaskDelayUntil() will return immediately (without blocking) if 
                it is used to specify a wake time that is already in the past. Therefore a task using vTaskDelayUntil() to 
                execute periodically will have to re-calculate its required wake time if the periodic execution is halted for 
                any reason (for example, the task is temporarily placed into the Suspended state) causing the task to miss one 
                or more periodic executions. This can be detected by checking the variable passed by reference as the 
                pxPreviousWakeTime parameter against the current tick count. This is however not necessary under most usage 
                scenarios.      The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      This function must not be called while the scheduler has been suspended by 
                a call to vTaskSuspendAll().
   - FRTOS1_uxTaskPriorityGet -Obtain the priority of any task.
   - FRTOS1_xTaskGetTickCount -Return the count of ticks since vTaskStartScheduler was called.
   - FRTOS1_xTaskGetTickCountFromISR -A version of xTaskGetTickCount() that can be called from an ISR.
   - FRTOS1_vTaskPrioritySet -Set the priority of any task.
   - FRTOS1_xSemaphoreCreateBinary -The old vSemaphoreCreateBinary() macro is now deprecated in favour of this 
                xSemaphoreCreateBinary() function.  Note that binary semaphores created using the vSemaphoreCreateBinary() 
                macro are created in a state such that the first call to 'take' the semaphore would pass, whereas binary 
                semaphores created using xSemaphoreCreateBinary() are created in a state such that the the semaphore must first 
                be 'given' before it can be 'taken'.      Function that creates a semaphore by using the existing queue 
                mechanism. The queue length is 1 as this is a binary semaphore.  The data size is 0 as nothing is actually 
                stored - all that is important is whether the queue is empty or full (the binary semaphore is available or not).
                This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task.  
                The semaphore need not be given back once obtained, so one task/interrupt can continuously 'give' the semaphore 
                while another continuously 'takes' the semaphore.  For this reason this type of semaphore does not use a 
                priority inheritance mechanism.  For an alternative that does use priority inheritance see 
                xSemaphoreCreateMutex().
   - FRTOS1_xSemaphoreCreateBinaryStatic -The old vSemaphoreCreateBinary() macro is now deprecated in favour of this 
                xSemaphoreCreateBinary() function.  Note that binary semaphores created using the vSemaphoreCreateBinary() 
                macro are created in a state such that the first call to 'take' the semaphore would pass, whereas binary 
                semaphores created using xSemaphoreCreateBinary() are created in a state such that the the semaphore must first 
                be 'given' before it can be 'taken'.      Function that creates a semaphore by using the existing queue 
                mechanism. The queue length is 1 as this is a binary semaphore.  The data size is 0 as nothing is actually 
                stored - all that is important is whether the queue is empty or full (the binary semaphore is available or not).
                This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task.  
                The semaphore need not be given back once obtained, so one task/interrupt can continuously 'give' the semaphore 
                while another continuously 'takes' the semaphore.  For this reason this type of semaphore does not use a 
                priority inheritance mechanism.  For an alternative that does use priority inheritance see 
                xSemaphoreCreateMutex().
   - FRTOS1_xSemaphoreCreateCounting -Macro that creates a counting semaphore by using the existing queue mechanism.      
                Counting semaphores are typically used for two things:      1. Counting events.   In this usage scenario an 
                event handler will 'give' a semaphore each time an event occurs (incrementing the semaphore count value), and a 
                handler task will 'take' a semaphore each time it processes an event (decrementing the semaphore count value). 
                The count value is therefore the difference between the number of events that have occurred and the number that 
                have been processed. In this case it is desirable for the initial count value to be zero.      2. Resource 
                management.   In this usage scenario the count value indicates the number of resources available. To obtain 
                control of a resource a task must first obtain a semaphore - decrementing the semaphore count value. When the 
                count value reaches zero there are no free resources. When a task finishes with the resource it 'gives' the 
                semaphore back - incrementing the semaphore count value. In this case it is desirable for the initial count 
                value to be equal to the maximum count value, indicating that all resources are free.
   - FRTOS1_xSemaphoreCreateCountingStatic -Macro that creates a counting semaphore by using the existing queue mechanism.      
                Counting semaphores are typically used for two things:      1. Counting events.   In this usage scenario an 
                event handler will 'give' a semaphore each time an event occurs (incrementing the semaphore count value), and a 
                handler task will 'take' a semaphore each time it processes an event (decrementing the semaphore count value). 
                The count value is therefore the difference between the number of events that have occurred and the number that 
                have been processed. In this case it is desirable for the initial count value to be zero.      2. Resource 
                management.   In this usage scenario the count value indicates the number of resources available. To obtain 
                control of a resource a task must first obtain a semaphore - decrementing the semaphore count value. When the 
                count value reaches zero there are no free resources. When a task finishes with the resource it 'gives' the 
                semaphore back - incrementing the semaphore count value. In this case it is desirable for the initial count 
                value to be equal to the maximum count value, indicating that all resources are free.
   - FRTOS1_xSemaphoreGive -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting(), and obtained using 
                sSemaphoreTake().      This must not be used from an ISR. See xSemaphoreGiveFromISR() for an alternative which 
                can be used from an ISR.      This macro must also not be used on semaphores created using 
                xSemaphoreCreateRecursiveMutex().      xSemaphoreGive() is part of the fully featured intertask communications 
                API. xSemaphoreAltGive() is the alternative API equivalent. Both versions require the same parameters and 
                return the same values.
   - FRTOS1_xSemaphoreTake -Macro to obtain a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting().      This macro must not be 
                called from an ISR. xQueueReceiveFromISR() can be used to take a semaphore from within an interrupt if required,
                although this would not be a normal operation. Semaphores use queues as their underlying mechanism, so 
                functions are to some extent interoperable.      xSemaphoreTake() is part of the fully featured intertask 
                communications API. xSemaphoreAltTake() is the alternative API equivalent. Both versions require the same 
                parameters and return the same values.
   - FRTOS1_uxSemaphoreGetCount -
   - FRTOS1_xSemaphoreGiveFromISR -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using a call 
                to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR.
   - FRTOS1_xSemaphoreTakeFromISR -Macro to take a semaphore from an ISR. The semaphore must have previously been created with 
                a call to vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created 
                using a call to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an 
                ISR, however taking a semaphore from an ISR is not a common operation.  It is likely to only be useful when 
                taking a counting semaphore when an interrupt is obtaining an object from a resource pool (when the semaphore 
                count indicates the number of resources available).
   - FRTOS1_xSemaphoreGetMutexHolder -Returns the holder of a mutex or semaphore. If xMutex is indeed a mutex type semaphore, 
                return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held 
                by a task), return NULL. Note: This Is is a good way of determining if the calling task is the mutex holder, 
                but not a good way of determining the identity of the mutex holder as the holder may change between the 
                function exiting and the returned value being tested.
   - FRTOS1_xSemaphoreCreateMutex -Macro that creates a mutex semaphore by using the existing queue mechanism.      Mutexes 
                created using this macro can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros. The 
                xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros should not be used.      Mutexes and binary 
                semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, 
                binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation 
                (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual 
                exclusion.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher 
                priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task 
                attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher 
                priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the 
                priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() 
                documentation page.      A binary semaphore need not be given back once obtained, so task synchronisation can 
                be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the 
                semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      Both 
                mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API 
                function that takes a parameter of this type.
   - FRTOS1_xSemaphoreCreateMutexStatic -Macro that creates a mutex semaphore by using the existing queue mechanism.      
                Mutexes created using this macro can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros. The 
                xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros should not be used.      Mutexes and binary 
                semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, 
                binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation 
                (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual 
                exclusion.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher 
                priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task 
                attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher 
                priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the 
                priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() 
                documentation page.      A binary semaphore need not be given back once obtained, so task synchronisation can 
                be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the 
                semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      Both 
                mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API 
                function that takes a parameter of this type.
   - FRTOS1_xSemaphoreCreateRecursiveMutex -Macro that implements a recursive mutex by using the existing queue mechanism.   
                Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and 
                xSemaphoreGiveRecursive() macros.  The  xSemaphoreTake() and xSemaphoreGive() macros should not be used.   A 
                mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until 
                the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task 
                successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has 
                also  'given' the mutex back exactly five times.   This type of semaphore uses a priority inheritance mechanism 
                so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer 
                required. Mutex type semaphores cannot be used from within interrupt service routines.   See 
                vSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one 
                task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within 
                interrupt service routines.
   - FRTOS1_xSemaphoreCreateRecursiveMutexStatic -Macro that implements a recursive mutex by using the existing queue mechanism.
                Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and 
                xSemaphoreGiveRecursive() macros.  The  xSemaphoreTake() and xSemaphoreGive() macros should not be used.   A 
                mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until 
                the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task 
                successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has 
                also  'given' the mutex back exactly five times.   This type of semaphore uses a priority inheritance mechanism 
                so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer 
                required. Mutex type semaphores cannot be used from within interrupt service routines.   See 
                vSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one 
                task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within 
                interrupt service routines.
   - FRTOS1_xSemaphoreTakeRecursive -Macro to recursively obtain, or 'take', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS1_xSemaphoreGiveRecursive -Macro to recursively release, or 'give', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS1_vSemaphoreDelete -Delete a semaphore.  This function must be used with care.  For example, do not delete a mutex 
                type semaphore if the mutex is held by a task.
   - FRTOS1_pvPortMalloc -Allocates a memory block using the port pvPortMalloc() function
   - FRTOS1_vPortFree -Frees a memory block previously allocated with pvPortMalloc()
   - FRTOS1_xPortGetFreeHeapSize -Returns the actual free size of the heap
   - FRTOS1_xTaskGetCurrentTaskHandle -The handle of the currently running (calling) task.
   - FRTOS1_xTaskGetIdleTaskHandle -The task handle associated with the Idle task. The Idle task is created automatically when 
                the RTOS scheduler is started.
   - FRTOS1_xTaskGetHandle -Looks up the handle of a task from the task's name.
   - FRTOS1_pcTaskGetTaskName -Returns the name of the task.
   - FRTOS1_xTaskGetSchedulerState -Returns the state of the scheduler
   - FRTOS1_uxTaskGetStackHighWaterMark -The stack used by a task will grow and shrink as the task executes and interrupts are 
                processed. uxTaskGetStackHighWaterMark() returns the minimum amount of remaining stack space that was available 
                to the task since the task started executing - that is the amount of stack that remained unused when the task 
                stack was at its greatest (deepest) value. This is what is referred to as the stack 'high water mark'.
   - FRTOS1_uxTaskGetNumberOfTasks -Returns the number of tasks
   - FRTOS1_uxQueueMessagesWaiting -Queries the number of items that are currently held within a queue.
   - FRTOS1_uxQueueMessagesWaitingfromISR -A version of uxQueueMessagesWaiting() that can be used from inside an interrupt 
                service routine.
   - FRTOS1_xQueueCreate -Creates a queue.
   - FRTOS1_xQueueCreateStatic -Creates a queue.
   - FRTOS1_vQueueDelete -Deletes a queue that was previously created using a call to xQueueCreate(). vQueueDelete() can also 
                be used to delete a semaphore.
   - FRTOS1_xQueueReset -Reset a queue back to its original empty state.  pdPASS is returned if the queue is successfully reset.
                pdFAIL is returned if the queue could not be reset because there are tasks blocked on the queue waiting to 
                either receive from the queue or send to the queue.
   - FRTOS1_xQueueSendToBack -Sends an item to the back of a queue.
   - FRTOS1_xQueueSendToFront -Sends an item to the front of a queue.
   - FRTOS1_xQueueReceive -Receives an item from a queue.
   - FRTOS1_xQueueOverwrite -This is a macro that calls the xQueueGenericSend() function. A version of xQueueSendToBack() that 
                will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwrite() is intended for use with queues that have a length of one, meaning the queue is either empty 
                or full. This function must not be called from an interrupt service routine (ISR). See xQueueOverwriteFromISR() 
                for an alternative which may be used in an ISR.
   - FRTOS1_xQueueOverwriteFromISR -This is a macro that calls the xQueueGenericSendFromISR() function. A version of 
                xQueueOverwrite() that can be used in an ISR. xQueueOverwriteFromISR() is similar to xQueueSendToBackFromISR(), 
                but will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwriteFromISR() is intended for use with queues that have a length of one, meaning the queue is either 
                empty or full.
   - FRTOS1_xQueuePeek -Reads an item from a queue, but does not remove the item from the queue. Therefore the same item would 
                be returned the next time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS1_xQueuePeekFromISR -A version of xQueuePeek() that can be used from an interrupt service routine (ISR). Reads an 
                item from a queue, but does not remove the item from the queue. Therefore the same item would be returned the 
                next time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS1_xQueueSendToBackFromISR -Versions of xQueueSendToBack() API functions that can be called from an ISR. Unlike 
                xQueueSendToBack() these functions do not permit a block time to be specified.
   - FRTOS1_xQueueSendToFrontFromISR -Versions of xQueueSendToFront() API functions that can be called from an ISR. Unlike 
                xQueueSendToFront() these functions do not permit a block time to be specified.
   - FRTOS1_xQueueReceiveFromISR -A version of xQueueReceive() that can be called from an ISR. Unlike xQueueReceive(), 
                xQueueReceiveFromISR() does not permit a block time to be specified.
   - FRTOS1_vQueueAddToRegistry -Assigns a name to a queue and adds the queue to the registry.
   - FRTOS1_vQueueUnregisterQueue -Removes a queue from the queue registry.
   - FRTOS1_xQueueIsQueueFullFromISR -Queries a queue to determine if the queue is full. This function should only be used in 
                an ISR.
   - FRTOS1_xQueueIsQueueEmptyFromISR -Queries a queue to determine if the queue is empty. This function should only be used in 
                an ISR.
   - FRTOS1_xEventGroupCreate -Create a new RTOS event group. This function cannot be called from an interrupt.      Event 
                groups are stored in variables of type EventGroupHandle_t. The number of bits (or flags) implemented within an 
                event group is 8 if configUSE_16_BIT_TICKS is set to 1, or 24 if configUSE_16_BIT_TICKS is set to 0. The 
                dependency on configUSE_16_BIT_TICKS results from the data type used for thread local storage in the internal 
                implementation of RTOS tasks.
   - FRTOS1_xEventGroupCreateStatic -Create a new RTOS event group. This function cannot be called from an interrupt.      
                Event groups are stored in variables of type EventGroupHandle_t. The number of bits (or flags) implemented 
                within an event group is 8 if configUSE_16_BIT_TICKS is set to 1, or 24 if configUSE_16_BIT_TICKS is set to 0. 
                The dependency on configUSE_16_BIT_TICKS results from the data type used for thread local storage in the 
                internal implementation of RTOS tasks.
   - FRTOS1_xEventGroupWaitBits -Read bits within an RTOS event group, optionally entering the Blocked state (with a timeout) 
                to wait for a bit or group of bits to become set. This function cannot be called from an interrupt.
   - FRTOS1_xEventGroupSetBits -Set bits (flags) within an RTOS event group. This function cannot be called from an interrupt. 
                xEventGroupSetBitsFromISR() is a version that can be called from an interrupt.      Setting bits in an event 
                group will automatically unblock tasks that are blocked waiting for the bits.
   - FRTOS1_xEventGroupSetBitsFromISR -Set bits (flags) within an RTOS event group. A version of xEventGroupSetBits() that can 
                be called from an interrupt service routine (ISR).      Setting bits in an event group will automatically 
                unblock tasks that are blocked waiting for the bits.      Setting bits in an event group is not a deterministic 
                operation because there are an unknown number of tasks that may be waiting for the bit or bits being set. 
                FreeRTOS does not allow non-deterministic operations to be performed in interrupts or from critical sections. 
                Therefore xEventGroupSetBitFromISR() sends a message to the RTOS daemon task to have the set operation 
                performed in the context of the daemon task - where a scheduler lock is used in place of a critical section.    
                INCLUDE_xEventGroupSetBitFromISR, configUSE_TIMERS and INCLUDE_xTimerPendFunctionCall must all be set to 1 in 
                FreeRTOSConfig.h for the xEventGroupSetBitsFromISR() function to be available.
   - FRTOS1_xEventGroupClearBits -Clear bits (flags) within an RTOS event group. This function cannot be called from an 
                interrupt. See xEventGroupClearBitsFromISR() for a version that can be called from an interrupt.
   - FRTOS1_xEventGroupClearBitsFromISR -A version of xEventGroupClearBits() that can be called from an interrupt.
   - FRTOS1_xEventGroupGetBits -Returns the current value of the event bits (event flags) in an RTOS event group. This function 
                cannot be used from an interrupt. See xEventGroupsGetBitsFromISR() for a version that can be used in an 
                interrupt.
   - FRTOS1_xEventGroupGetBitsFromISR -A version of xEventGroupGetBits() that can be called from an interrupt.
   - FRTOS1_xEventGroupSync -Atomically set bits (flags) within an RTOS event group, then wait for a combination of bits to be 
                set within the same event group. This functionality is typically used to synchronise multiple tasks (often 
                called a task rendezvous), where each task has to wait for the other tasks to reach a synchronisation point 
                before proceeding.      This function cannot be used from an interrupt.      The function will return before 
                its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that 
                time. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function 
                returns.
   - FRTOS1_xTimerCreate -Creates a new software timer instance. This allocates the storage required by the new timer, 
                initialises the new timers internal state, and returns a handle by which the new timer can be referenced.
   - FRTOS1_xTimerIsTimerActive -Queries a timer to see if it is active or dormant.    A timer will be dormant if:          It 
                has been created but not started, or       It is an expired one-shot timer that has not been restarted.      
                Timers are created in the dormant state. The xTimerStart(), xTimerReset(), xTimerStartFromISR(), 
                xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions can all be used to 
                transition a timer into the active state.
   - FRTOS1_xTimerStart -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerStart() starts a timer that was previously created using the xTimerCreate() API function. If the timer 
                had already been started and was already in the active state, then xTimerStart() has equivalent functionality 
                to the xTimerReset() API function.      Starting a timer ensures the timer is in the active state. If the timer 
                is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get 
                called 'n 'ticks after xTimerStart() was called, where 'n' is the timers defined period.      It is valid to 
                call xTimerStart() before the RTOS scheduler has been started, but when this is done the timer will not 
                actually start until the RTOS scheduler is started, and the timers expiry time will be relative to when the 
                RTOS scheduler is started, not relative to when xTimerStart() was called.      The configUSE_TIMERS 
                configuration constant must be set to 1 for xTimerStart() to be available.
   - FRTOS1_xTimerStop -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerStop() stops a timer that was previously started using either of the xTimerStart(), xTimerReset(), 
                xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions. 
                Stopping a timer ensures the timer is not in the active state.      The configUSE_TIMERS configuration constant 
                must be set to 1 for xTimerStop() to be available.
   - FRTOS1_xTimerChangePeriod -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS 
                timer API functions send commands to the timer service task through a queue called the timer command queue. The 
                timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. 
                The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerChangePeriod() changes the period of a timer that was previously created using the xTimerCreate() API 
                function.      xTimerChangePeriod() can be called to change the period of an active or dormant state timer.     
                The configUSE_TIMERS configuration constant must be set to 1 for xTimerChangePeriod() to be available.
   - FRTOS1_xTimerDelete -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerDelete() deletes a timer that was previously created using the xTimerCreate() API function.      The 
                configUSE_TIMERS configuration constant must be set to 1 for xTimerDelete() to be available.
   - FRTOS1_xTimerReset -Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API 
                functions send commands to the timer service task through a queue called the timer command queue. The timer 
                command queue is private to the RTOS kernel itself and is not directly accessible to application code. The 
                length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      
                xTimerReset() re-starts a timer that was previously created using the xTimerCreate() API function. If the timer 
                had already been started and was already in the active state, then xTimerReset() will cause the timer to 
                re-evaluate its expiry time so that it is relative to when xTimerReset() was called. If the timer was in the 
                dormant state then xTimerReset() has equivalent functionality to the xTimerStart() API function.      Resetting 
                a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean 
                time, the callback function associated with the timer will get called 'n' ticks after xTimerReset() was called, 
                where 'n' is the timers defined period.      It is valid to call xTimerReset() before the RTOS scheduler has 
                been started, but when this is done the timer will not actually start until the RTOS scheduler is started, and 
                the timers expiry time will be relative to when the RTOS scheduler is started, not relative to when 
                xTimerReset() was called.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset() 
                to be available.
   - FRTOS1_xTimerStartFromISR -A version of xTimerStart() that can be called from an interrupt service routine.
   - FRTOS1_xTimerStopFromISR -A version of xTimerStop() that can be called from an interrupt service routine.
   - FRTOS1_xTimerChangePeriodFromISR -A version of xTimerChangePeriod() that can be called from an interrupt service routine.
   - FRTOS1_xTimerResetFromISR -A version of xTimerReset() that can be called from an interrupt service routine.
   - FRTOS1_pvTimerGetTimerID -Returns the ID assigned to the timer.      IDs are assigned to timers using the pvTimerID 
                parameter of the call to xTimerCreate() that was used to create the timer.      If the same callback function 
                is assigned to multiple timers then the timer ID can be used within the callback function to identify which 
                timer actually expired.
   - FRTOS1_xTimerGetTimerDaemonTaskHandle -INCLUDE_xTimerGetTimerDaemonTaskHandle and configUSE_TIMERS must both be set to 1 
                in FreeRTOSConfig.h for xTimerGetTimerDaemonTaskHandle() to be available.
   - FRTOS1_pcTimerGetTimerName -
   - FRTOS1_xTimerPendFunctionCall -Used to pend the execution of a function to the RTOS daemon task (the timer service task, 
                hence this function is pre-fixed with 'Timer').      Functions that can be deferred to the RTOS daemon task 
                must have the following prototype:      void vPendableFunction( void * pvParameter1, uint32_t ulParameter2 );   
                The pvParameter1 and ulParameter2 are provided for use by the application code.      
                INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for xTimerPendFunctionCall() to be 
                available.
   - FRTOS1_xTimerPendFunctionCallFromISR -Used from application interrupt service routines to defer the execution of a 
                function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is 
                prefixed with 'Timer').      Ideally an interrupt service routine (ISR) is kept as short as possible, but 
                sometimes an ISR either has a lot of processing to do, or needs to perform processing that is not deterministic.
                In these cases xTimerPendFunctionCallFromISR() can be used to defer processing of a function to the RTOS daemon 
                task.      A mechanism is provided that allows the interrupt to return directly to the task that will 
                subsequently execute the pended function. This allows the callback function to execute contiguously in time 
                with the interrupt - just as if the callback had executed in the interrupt itself.      Functions that can be 
                deferred to the RTOS daemon task must have the following prototype:      void vPendableFunction( void * 
                pvParameter1, uint32_t ulParameter2 );      The pvParameter1 and ulParameter2 are provided for use by the 
                application code.      INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for 
                xTimerPendFunctionCallFromISR() to be available.
   - FRTOS1_xTaskNotifyGive -Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is 
                created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and 
                optionally update the receiving task's notification value.      xTaskNotifyGive() is a macro intended for use 
                when an RTOS task notification value is being used as a light weight and faster binary or counting semaphore 
                alternative. FreeRTOS semaphores are given using the xSemaphoreGive() API function, xTaskNotifyGive() is the 
                equivalent that instead uses the receiving RTOS task's notification value.      When a task notification value 
                is being used as a binary or counting semaphore equivalent then the task being notified should wait for the 
                notification using the ulTaskNotifyTake() API function rather than the xTaskNotifyWait() API function.      
                xTaskNotifyGive() must not be called from an interrupt service routine. Use vTaskNotifyGiveFromISR() instead.
   - FRTOS1_vTaskNotifyGiveFromISR -A version of xTaskNotifyGive() that can be called from an interrupt service routine (ISR).  
                Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. An 
                RTOS task notification is an event sent directly to a task that can unblock the receiving task, and optionally 
                update the receiving task's notification value.      vTaskNotifyGiveFromISR() is a function intended for use 
                when an RTOS task notification value is being used as a light weight and faster binary or counting semaphore 
                alternative. FreeRTOS semaphores are given from an interrupt using the xSemaphoreGiveFromISR() API function, 
                vTaskNotifyGiveFromISR() is the equivalent that instead uses the receiving RTOS task's notification value.      
                When a task notification value is being used as a binary or counting semaphore equivalent then the task being 
                notified should wait for the notification using the ulTaskNotifyTake() API function rather than the 
                xTaskNotifyWait() API function.
   - FRTOS1_ulTaskNotifyTake -Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is 
                created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and 
                optionally update the receiving task's notification value.      ulTaskNotifyTake() is intended for use when a 
                task notification is used as a faster and lighter weight binary or counting semaphore alternative. FreeRTOS 
                semaphores are taken using the xSemaphoreTake() API function, ulTaskNotifyTake() is the equivalent that instead 
                uses a task notification.      When a task is using its notification value as a binary or counting semaphore 
                other tasks and interrupts should send notifications to it using either the xTaskNotifyGive() macro, or the 
                xTaskNotify() function with the function's eAction parameter set to eIncrement (the two are equivalent).      
                ulTaskNotifyTake() can either clear the task's notification value to zero on exit, in which case the 
                notification value acts like a binary semaphore, or decrement the task's notification value on exit, in which 
                case the notification value acts more like a counting semaphore.      An RTOS task can use ulTaskNotifyTake() 
                to [optionally] block to wait for a the task's notification value to be non-zero. The task does not consume any 
                CPU time while it is in the Blocked state.      Where as xTaskNotifyWait() will return when a notification is 
                pending, ulTaskNotifyTake() will return when the task's notification value is not zero, decrementing the task's 
                notification value before it returns.
   - FRTOS1_xTaskNotify -[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour 
                then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS task has a 32-bit 
                notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used to send an 
                event directly to and potentially unblock an RTOS task, and optionally update the receiving task's notification 
                value in one of the following ways:          - Write a 32-bit number to the notification value       - Add one 
                (increment) the notification value       - Set one or more bits in the notification value       - Leave the 
                notification value unchanged      This function must not be called from an interrupt service routine (ISR). Use 
                xTaskNotifyFromISR() instead.
   - FRTOS1_xTaskNotifyFromISR -[If you are using RTOS task notifications to implement binary or counting semaphore type 
                behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      A version of 
                xTaskNotify() that can be called from an ISR.       Each RTOS task has a 32-bit notification value which is 
                initialised to zero when the RTOS task is created. xTaskNotify() is used to send an event directly to and 
                potentially unblock an RTOS task, and optionally update the receiving task's notification value in one of the 
                following ways:          - Write a 32-bit number to the notification value       - Add one (increment) the 
                notification value       - Set one or more bits in the notification value       - Leave the notification value 
                unchanged      This function must not be called from an interrupt service routine (ISR). Use 
                xTaskNotifyFromISR() instead.
   - FRTOS1_xTaskNotifyAndQuery -[If you are using RTOS task notifications to implement binary or counting semaphore type 
                behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS task has 
                a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used 
                to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving task's 
                notification value in one of the following ways:          - Write a 32-bit number to the notification value     
                - Add one (increment) the notification value       - Set one or more bits in the notification value       - 
                Leave the notification value unchanged      This function must not be called from an interrupt service routine 
                (ISR). Use xTaskNotifyFromISR() instead.
   - FRTOS1_xTaskNotifyAndQueryFromISR -[If you are using RTOS task notifications to implement binary or counting semaphore 
                type behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS 
                task has a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() 
                is used to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving 
                task's notification value in one of the following ways:          - Write a 32-bit number to the notification 
                value       - Add one (increment) the notification value       - Set one or more bits in the notification value 
                - Leave the notification value unchanged      This function must not be called from an interrupt service 
                routine (ISR). Use xTaskNotifyFromISR() instead.
   - FRTOS1_xTaskNotifyWait -[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour 
                then use the simpler ulTaskNotifyTake() API function instead of xTaskNotifyWait()]      Each RTOS task has a 
                32-bit notification value which is initialised to zero when the RTOS task is created. An RTOS task notification 
                is an event sent directly to a task that can unblock the receiving task, and optionally update the receiving 
                task's notification value in a number of different ways. For example, a notification may overwrite the 
                receiving task's notification value, or just set one or more bits in the receiving task's notification value. 
                See the RTOS task notifications use case documentation for examples.      xTaskNotifyWait() waits, with an 
                optional timeout, for the calling task to receive a notification.      If the receiving RTOS task was already 
                Blocked waiting for a notification when one arrives the receiving RTOS task will be removed from the Blocked 
                state and the notification cleared.
   - FRTOS1_xTaskNotifyStateClear -[If you are using RTOS task notifications to implement binary or counting semaphore type 
                behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]       If the 
                notification state of the task referenced by the handle xTask is eNotified, then set the task's notification 
                state to eNotWaitingNotification. The task's notification value is not altered.  Set xTask to NULL to clear the 
                notification state of the calling task.
   - FRTOS1_vTaskSetThreadLocalStoragePointer -Only enabled if configNUM_THREAD_LOCAL_STORAGE_POINTERS is >0.
   - FRTOS1_pvTaskGetThreadLocalStoragePointer -Sets the thread local storage. Only enabled if 
                configNUM_THREAD_LOCAL_STORAGE_POINTERS is >0
   - FRTOS1_pcTaskGetName -Looks up the name of a task from the task's handle.
   - FRTOS1_vTaskGetInfo -Whereas uxTaskGetSystemState() populates a TaskStatus_t structure for each task in the system, 
                vTaskGetInfo() populates a TaskStatus_t structures for just a single task. The TaskStatus_t structure contains, 
                among other things, members for the task handle, task name, task priority, task state, and total amount of run 
                time consumed by the task.
   - FRTOS1_AppConfigureTimerForRuntimeStats -Configures the timer for generating runtime statistics
   - FRTOS1_AppGetRuntimeCounterValueFromISR -returns the current runtime counter. Function can be called from an interrupt 
                service routine.
   - FRTOS1_Init -Low level initialization routine called from startup code. This method ensures that the tick timer is  not 
                enabled.
   - FRTOS1_Deinit -Module deinitialization method

Module "Cpu"       (component MK64FN1M0LL12)

===================================================================================
